name: Build and Deploy GH Runner on ACI

permissions:
  id-token: write
  contents: read
  
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  
env:
  IMAGE_NAME: runner
  IMAGE_TAG: ${{github.run_number}}
  RUNNER_REPOSITORY_URL: "https://github.com/chboudry/aml-secure-pipeline"
  RESOURCE_GROUP: ${{secrets.RG_NAME}}
  LOCATION: ${{secrets.LOCATION}}
  

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      # Build and Push image to Azure Container Registry
      - name: Build container
        run: | 
          docker build . -t ${{ secrets.ACR_SERVER }}/$IMAGE_NAME:$IMAGE_TAG
          
      - name: Login to ACR 
        run:  docker login ${{ secrets.ACR_SERVER }} -u ${{ secrets.ACR_USER }} -p ${{ secrets.ACR_PASSWORD }} 
      - name: Push to ACR
        run: |
          docker push ${{ secrets.ACR_SERVER }}/$IMAGE_NAME:$IMAGE_TAG
          
      # Login to Azure using Service Principal
      - name: Azure Login
        uses: Azure/login@v1
        with:
          client-id: ${{secrets.CLIENT_ID}}
          tenant-id: ${{secrets.TENANT_ID}}
          subscription-id: ${{secrets.SUBSCRIPTION_ID}}

      # Deploy an Azure Container Instance
      - name: Deploy to Azure Container Instances
        run: az container create -g ${{ env.RESOURCE_GROUP }} --name actions-runner --location ${{ env.LOCATION }} --cpu 2 --image ${{ SECRETS.ACR_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} --registry-login-server ${{ SECRETS.ACR_SERVER }} --registry-username ${{ secrets.ACR_USER }} --registry-password ${{ secrets.ACR_PASSWORD }} --vnet ${{ secrets.ACI_VNET }} --subnet ${{ secrets.ACI_SUBNET }} --environment-variables RUNNER_REPOSITORY_URL=${{ env.RUNNER_REPOSITORY_URL }} --secure-environment-variables RUNNERTOKEN=${{ secrets.RUNNERTOKEN }}


